// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Js_exn from "bs-platform/lib/es6/js_exn.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as Js_option from "bs-platform/lib/es6/js_option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as ReasonApollo from "reason-apollo/src/ReasonApollo.bs.js";
import * as Chakra__Input from "bs-chakra/src/Chakra__Input.bs.js";
import * as Chakra__Toast from "bs-chakra/src/Chakra__Toast.bs.js";
import * as Chakra__Button from "bs-chakra/src/Chakra__Button.bs.js";
import * as Core from "@chakra-ui/core";
import * as Caml_exceptions from "bs-platform/lib/es6/caml_exceptions.js";
import * as Group$WhatsAppReason from "./Group.bs.js";
import * as ErrorAlert$WhatsAppReason from "./ErrorAlert.bs.js";
import * as FormValidation$WhatsAppReason from "../utils/FormValidation.bs.js";

var GraphQLErrors = Caml_exceptions.create("SignUp-WhatsAppReason.GraphQLErrors");

var EmptyResponse = Caml_exceptions.create("SignUp-WhatsAppReason.EmptyResponse");

function str(prim) {
  return prim;
}

var ppx_printed_query = "mutation signUp($name: String!, $username: String!, $password: String!, $passwordConfirm: String!)  {\nsignUp(name: $name, username: $username, password: $password, passwordConfirm: $passwordConfirm)  {\nid  \n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var value$2 = Js_dict.get(value$1, "signUp");
  var tmp;
  if (value$2 !== undefined) {
    var value$3 = Caml_option.valFromOption(value$2);
    var match = Js_json.decodeNull(value$3);
    if (match !== undefined) {
      tmp = undefined;
    } else {
      var value$4 = Js_option.getExn(Js_json.decodeObject(value$3));
      var value$5 = Js_dict.get(value$4, "id");
      var tmp$1;
      if (value$5 !== undefined) {
        var value$6 = Caml_option.valFromOption(value$5);
        var value$7 = Js_json.decodeString(value$6);
        tmp$1 = value$7 !== undefined ? value$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
      } else {
        tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type User is missing");
      }
      tmp = {
        id: tmp$1
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          signUp: tmp
        };
}

function make(name, username, password, passwordConfirm, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  [
                    "name",
                    name
                  ],
                  [
                    "username",
                    username
                  ],
                  [
                    "password",
                    password
                  ],
                  [
                    "passwordConfirm",
                    passwordConfirm
                  ]
                ].filter(function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var name = variables.name;
  var username = variables.username;
  var password = variables.password;
  var passwordConfirm = variables.passwordConfirm;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  [
                    "name",
                    name
                  ],
                  [
                    "username",
                    username
                  ],
                  [
                    "password",
                    password
                  ],
                  [
                    "passwordConfirm",
                    passwordConfirm
                  ]
                ].filter(function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })),
          parse: parse
        };
}

function makeVariables(name, username, password, passwordConfirm, param) {
  return Js_dict.fromArray([
                [
                  "name",
                  name
                ],
                [
                  "username",
                  username
                ],
                [
                  "password",
                  password
                ],
                [
                  "passwordConfirm",
                  passwordConfirm
                ]
              ].filter(function (param) {
                  return !Js_json.test(param[1], /* Null */5);
                }));
}

function definition_2(graphql_ppx_use_json_variables_fn, name, username, password, passwordConfirm, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    [
                      "name",
                      name
                    ],
                    [
                      "username",
                      username
                    ],
                    [
                      "password",
                      password
                    ],
                    [
                      "passwordConfirm",
                      passwordConfirm
                    ]
                  ].filter(function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    })));
}

var definition = [
  parse,
  ppx_printed_query,
  definition_2
];

function ret_type(f) {
  return {};
}

var MT_Ret = {};

var SignUpConfig = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

var SignUpMutation = ReasonApollo.CreateMutation({
      query: ppx_printed_query,
      parse: parse
    });

function SignUp(Props) {
  var onSignUpSuccess = Props.onSignUpSuccess;
  var match = React.useReducer((function (state, name) {
          switch (name.TAG | 0) {
            case /* UpdateName */0 :
                return {
                        name: name._0,
                        username: state.username,
                        password: state.password,
                        passwordConfirm: state.passwordConfirm
                      };
            case /* UpdateUsername */1 :
                return {
                        name: state.name,
                        username: name._0,
                        password: state.password,
                        passwordConfirm: state.passwordConfirm
                      };
            case /* UpdatePassword */2 :
                return {
                        name: state.name,
                        username: state.username,
                        password: name._0,
                        passwordConfirm: state.passwordConfirm
                      };
            case /* UpdatePasswordConfirm */3 :
                return {
                        name: state.name,
                        username: state.username,
                        password: state.password,
                        passwordConfirm: name._0
                      };
            
          }
        }), {
        name: "",
        username: "",
        password: "",
        passwordConfirm: ""
      });
  var dispatch = match[1];
  var state = match[0];
  var toast = Chakra__Toast.useToast(undefined);
  return React.createElement(SignUpMutation.make, {
              children: (function (mutate, param) {
                  var result = param.result;
                  var tmp;
                  tmp = typeof result === "number" || result.TAG ? null : React.createElement(ErrorAlert$WhatsAppReason.make, {
                          message: result._0.message
                        });
                  return React.createElement(Group$WhatsAppReason.make, {
                              title: "Sign Up",
                              children: null
                            }, React.createElement(Core.Text, {
                                  fontSize: "md",
                                  children: "SignUp to Chat"
                                }), React.createElement("br", undefined), React.createElement("form", undefined, React.createElement(Core.Input, Chakra__Input.makeProps(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, (function (e) {
                                              return Curry._1(dispatch, {
                                                          TAG: /* UpdateName */0,
                                                          _0: e.target.value
                                                        });
                                            }), "Name", /* text */-856044371)(undefined, undefined)), React.createElement("br", undefined), React.createElement("br", undefined), React.createElement(Core.Input, Chakra__Input.makeProps(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, (function (e) {
                                              return Curry._1(dispatch, {
                                                          TAG: /* UpdateUsername */1,
                                                          _0: e.target.value
                                                        });
                                            }), "Username", /* text */-856044371)(undefined, undefined)), React.createElement("br", undefined), React.createElement("br", undefined), React.createElement(Core.Input, Chakra__Input.makeProps(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, (function (e) {
                                              return Curry._1(dispatch, {
                                                          TAG: /* UpdatePassword */2,
                                                          _0: e.target.value
                                                        });
                                            }), "Password", /* password */-925883621)(undefined, undefined)), React.createElement("br", undefined), React.createElement("br", undefined), React.createElement(Core.Input, Chakra__Input.makeProps(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, (function (e) {
                                              return Curry._1(dispatch, {
                                                          TAG: /* UpdatePasswordConfirm */3,
                                                          _0: e.target.value
                                                        });
                                            }), "PasswordConfirm", /* password */-925883621)(undefined, undefined)), tmp, React.createElement("br", undefined), React.createElement("br", undefined), React.createElement(Core.Button, Curry._2(Chakra__Button.makeProps(undefined, /* blue */-1055309158, undefined, undefined, result === /* Loading */0, undefined, undefined, undefined, undefined, /* submit */436623384, "Next")((function (e) {
                                                e.preventDefault();
                                                var match = FormValidation$WhatsAppReason.nonEmptyString(state.name);
                                                var match$1 = FormValidation$WhatsAppReason.nonEmptyString(state.password);
                                                var match$2 = FormValidation$WhatsAppReason.nonEmptyString(state.username);
                                                var match$3 = FormValidation$WhatsAppReason.nonEmptyString(state.passwordConfirm);
                                                if (!match) {
                                                  return Curry.app(toast, [
                                                              "Oops",
                                                              undefined,
                                                              undefined,
                                                              "Invalid name",
                                                              /* warning */164354652,
                                                              undefined,
                                                              /* topRight */926161159,
                                                              undefined,
                                                              undefined
                                                            ]);
                                                }
                                                if (!match$1) {
                                                  return Curry.app(toast, [
                                                              "Oops",
                                                              undefined,
                                                              undefined,
                                                              "Require non-empty username",
                                                              /* warning */164354652,
                                                              undefined,
                                                              /* topRight */926161159,
                                                              undefined,
                                                              undefined
                                                            ]);
                                                }
                                                if (!match$2) {
                                                  return Curry.app(toast, [
                                                              "Oops",
                                                              undefined,
                                                              undefined,
                                                              "Require non-empty password",
                                                              /* warning */164354652,
                                                              undefined,
                                                              /* topRight */926161159,
                                                              undefined,
                                                              undefined
                                                            ]);
                                                }
                                                if (match$3) {
                                                  var partial_arg = state.passwordConfirm;
                                                  var partial_arg$1 = state.password;
                                                  var partial_arg$2 = state.username;
                                                  var partial_arg$3 = state.name;
                                                  var signinVariables = function (param) {
                                                    return makeVariables(partial_arg$3, partial_arg$2, partial_arg$1, partial_arg, param);
                                                  };
                                                  Curry._4(mutate, Caml_option.some(Curry._1(signinVariables, undefined)), undefined, undefined, undefined).then(function (res) {
                                                        var exit = 0;
                                                        if (typeof res === "number" || !res.TAG) {
                                                          exit = 1;
                                                        } else {
                                                          var user = res._0.signUp;
                                                          if (user !== undefined) {
                                                            Curry._3(onSignUpSuccess, state.username, state.password, Caml_option.valFromOption(user).id);
                                                          } else {
                                                            Curry.app(toast, [
                                                                  "Oops",
                                                                  undefined,
                                                                  undefined,
                                                                  "Something went wrong!",
                                                                  /* danger */512905955,
                                                                  undefined,
                                                                  /* topRight */926161159,
                                                                  undefined,
                                                                  undefined
                                                                ]);
                                                          }
                                                        }
                                                        if (exit === 1) {
                                                          Curry.app(toast, [
                                                                "Oops",
                                                                undefined,
                                                                undefined,
                                                                "Something went wrong!",
                                                                /* danger */512905955,
                                                                undefined,
                                                                /* topRight */926161159,
                                                                undefined,
                                                                undefined
                                                              ]);
                                                        }
                                                        return Promise.resolve(undefined);
                                                      });
                                                  return ;
                                                }
                                                Curry.app(toast, [
                                                      "Oops",
                                                      undefined,
                                                      undefined,
                                                      "Require non-empty password confirmation",
                                                      /* warning */164354652,
                                                      undefined,
                                                      /* topRight */926161159,
                                                      undefined,
                                                      undefined
                                                    ]);
                                                
                                              })), undefined, undefined))));
                })
            });
}

var make$1 = SignUp;

export {
  GraphQLErrors ,
  EmptyResponse ,
  str ,
  SignUpConfig ,
  SignUpMutation ,
  make$1 as make,
  
}
/* SignUpMutation Not a pure module */
