// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as ReactApollo from "react-apollo";
import * as ReactHooks from "@apollo/react-hooks";
import * as Client$WhatsAppReason from "../services/Client.bs.js";

function str(prim) {
  return prim;
}

var initialState = {
  me: /* Loading */1
};

var context = React.createContext(initialState);

var make = context.Provider;

function makeProps(value, children, param) {
  return {
          value: value,
          children: children
        };
}

var ContextProvider = {
  make: make,
  makeProps: makeProps
};

function AppStore(Props) {
  var children = Props.children;
  var match = React.useState(function () {
        return initialState;
      });
  var setValue = match[1];
  var value = match[0];
  React.useEffect((function () {
          var match = value.me;
          var exit = 0;
          if (typeof match === "number" || match.TAG !== /* Success */1) {
            exit = 1;
          }
          if (exit === 1) {
            Curry._1(setValue, (function (value) {
                    return {
                            me: value.me
                          };
                  }));
          }
          
        }), [value]);
  var me = value.me;
  var tmp;
  tmp = typeof me === "number" || me.TAG !== /* Success */1 ? children : React.createElement(ReactApollo.ApolloProvider, {
          client: Client$WhatsAppReason.instance,
          children: React.createElement(ReactHooks.ApolloProvider, {
                client: Client$WhatsAppReason.instance,
                children: children
              })
        });
  return React.createElement(make, makeProps(value, tmp, undefined));
}

var make$1 = AppStore;

export {
  str ,
  initialState ,
  context ,
  ContextProvider ,
  make$1 as make,
  
}
/* context Not a pure module */
