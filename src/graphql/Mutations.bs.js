// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Js_exn from "bs-platform/lib/es6/js_exn.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as Js_option from "bs-platform/lib/es6/js_option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";

var ppx_printed_query = "mutation signIn($username: String!, $password: String!)  {\nsignIn(username: $username, password: $password)  {\nid  \n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var value$2 = Js_dict.get(value$1, "signIn");
  var tmp;
  if (value$2 !== undefined) {
    var value$3 = Caml_option.valFromOption(value$2);
    var match = Js_json.decodeNull(value$3);
    if (match !== undefined) {
      tmp = undefined;
    } else {
      var value$4 = Js_option.getExn(Js_json.decodeObject(value$3));
      var value$5 = Js_dict.get(value$4, "id");
      var tmp$1;
      if (value$5 !== undefined) {
        var value$6 = Caml_option.valFromOption(value$5);
        var value$7 = Js_json.decodeString(value$6);
        tmp$1 = value$7 !== undefined ? value$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
      } else {
        tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type User is missing");
      }
      tmp = {
        id: tmp$1
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          signIn: tmp
        };
}

function make(username, password, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  [
                    "username",
                    username
                  ],
                  [
                    "password",
                    password
                  ]
                ].filter(function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var username = variables.username;
  var password = variables.password;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  [
                    "username",
                    username
                  ],
                  [
                    "password",
                    password
                  ]
                ].filter(function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })),
          parse: parse
        };
}

function makeVariables(username, password, param) {
  return Js_dict.fromArray([
                [
                  "username",
                  username
                ],
                [
                  "password",
                  password
                ]
              ].filter(function (param) {
                  return !Js_json.test(param[1], /* Null */5);
                }));
}

function definition_2(graphql_ppx_use_json_variables_fn, username, password, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    [
                      "username",
                      username
                    ],
                    [
                      "password",
                      password
                    ]
                  ].filter(function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    })));
}

var definition = [
  parse,
  ppx_printed_query,
  definition_2
];

function ret_type(f) {
  return {};
}

var MT_Ret = {};

var SignIn = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

var ppx_printed_query$1 = "mutation signUp($name: String!, $username: String!, $password: String!, $passwordConfirm: String!)  {\nsignUp(name: $name, username: $username, password: $password, passwordConfirm: $passwordConfirm)  {\nid  \n}\n\n}\n";

function parse$1(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var value$2 = Js_dict.get(value$1, "signUp");
  var tmp;
  if (value$2 !== undefined) {
    var value$3 = Caml_option.valFromOption(value$2);
    var match = Js_json.decodeNull(value$3);
    if (match !== undefined) {
      tmp = undefined;
    } else {
      var value$4 = Js_option.getExn(Js_json.decodeObject(value$3));
      var value$5 = Js_dict.get(value$4, "id");
      var tmp$1;
      if (value$5 !== undefined) {
        var value$6 = Caml_option.valFromOption(value$5);
        var value$7 = Js_json.decodeString(value$6);
        tmp$1 = value$7 !== undefined ? value$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
      } else {
        tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type User is missing");
      }
      tmp = {
        id: tmp$1
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          signUp: tmp
        };
}

function make$1(name, username, password, passwordConfirm, param) {
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray([
                  [
                    "name",
                    name
                  ],
                  [
                    "username",
                    username
                  ],
                  [
                    "password",
                    password
                  ],
                  [
                    "passwordConfirm",
                    passwordConfirm
                  ]
                ].filter(function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })),
          parse: parse$1
        };
}

function makeWithVariables$1(variables) {
  var name = variables.name;
  var username = variables.username;
  var password = variables.password;
  var passwordConfirm = variables.passwordConfirm;
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray([
                  [
                    "name",
                    name
                  ],
                  [
                    "username",
                    username
                  ],
                  [
                    "password",
                    password
                  ],
                  [
                    "passwordConfirm",
                    passwordConfirm
                  ]
                ].filter(function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })),
          parse: parse$1
        };
}

function makeVariables$1(name, username, password, passwordConfirm, param) {
  return Js_dict.fromArray([
                [
                  "name",
                  name
                ],
                [
                  "username",
                  username
                ],
                [
                  "password",
                  password
                ],
                [
                  "passwordConfirm",
                  passwordConfirm
                ]
              ].filter(function (param) {
                  return !Js_json.test(param[1], /* Null */5);
                }));
}

function definition_2$1(graphql_ppx_use_json_variables_fn, name, username, password, passwordConfirm, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    [
                      "name",
                      name
                    ],
                    [
                      "username",
                      username
                    ],
                    [
                      "password",
                      password
                    ],
                    [
                      "passwordConfirm",
                      passwordConfirm
                    ]
                  ].filter(function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    })));
}

var definition$1 = [
  parse$1,
  ppx_printed_query$1,
  definition_2$1
];

function ret_type$1(f) {
  return {};
}

var MT_Ret$1 = {};

var SignUp = {
  ppx_printed_query: ppx_printed_query$1,
  query: ppx_printed_query$1,
  parse: parse$1,
  make: make$1,
  makeWithVariables: makeWithVariables$1,
  makeVariables: makeVariables$1,
  definition: definition$1,
  ret_type: ret_type$1,
  MT_Ret: MT_Ret$1
};

export {
  SignIn ,
  SignUp ,
  
}
/* No side effect */
